const HELP_MESSAGE = 'このスキルはテスト用のスキルです。';
const HELP_REPROMPT = 'テスト用のスキルです。';
const STOP_MESSAGE = 'またお願いしますね！';
'use strict';
const Alexa = require('alexa-sdk');

const APP_ID = undefined;
const makePlainText = Alexa.utils.TextUtils.makePlainText;  //テキストの生成
const makeImage = Alexa.utils.ImageUtils.makeImage; //画像の生成

const handlers = {
    //起動時に呼ばれるIntent
    'LaunchRequest': function () {
        if(supportsDisplay.call(this)){
            let itemI = makeImage('https://s3-ap-northeast-1.amazonaws.com/hnd-kanko/1.jpg', 400, 480);
            let item2 = makeImage('https://s3-ap-northeast-1.amazonaws.com/hnd-kanko/2.png', 400, 480);
            const listItemBuilder = new Alexa.templateBuilders.ListItemBuilder();
            const listTemplateBuilder = new Alexa.templateBuilders.ListTemplate2Builder();
            listItemBuilder.addItem(itemI, 'はじめ');
            listItemBuilder.addItem(item2, 'ふたつ');
            const listItems = listItemBuilder.build();
            const listTemplate = listTemplateBuilder.setToken('listToken')
                .setTitle('画像表示テスト')
                .setListItems(listItems)
                .build();
            this.response.speak("次の画像から選んでケロ").renderTemplate(listTemplate).listen("はよ、この中から選んでや");
            this.emit(':responseReady');
        }
        else{
            this.emit(':ask',"こんにちは。行きたい場所や、カップルにオススメの場所、など何でも聞いてください！");
        }
    },
//画像を選択した際の処理
    'ElementSelected': function () {
        let message = '画像を選んでね';
        switch (this.event.request.token) {
            case "はじめ":
                message = '一つ目を選びました。';
                break;
            case "ふたつ":
                message = '二つ目を選びました。';
                break;
            case "みっつ":
                message = '三つ目を選びました。';
                break;
        }
        this.response.speak("よう選んだ。偉い。");
        this.emit(':responseReady');
    },
    'AMAZON.HelpIntent': function () {
        const speechOutput = HELP_MESSAGE;
        const reprompt = HELP_REPROMPT;

        this.response.speak(speechOutput).listen(reprompt);
        this.emit(':responseReady');
    },
    'AMAZON.CancelIntent': function () {
        this.response.speak(STOP_MESSAGE);
        this.emit(':responseReady');
    },
    'AMAZON.StopIntent': function () {
        this.response.speak(STOP_MESSAGE);
        this.emit(':responseReady');
    },
    //どのインテントにも属さない発話だとUnhandledがコールされます。
    'Unhandled': function() {
        const message = '申し訳ありません。該当の情報を見つけることはできませんでした。';
        this.response.speak(message)
        this.emit(':responseReady');
    }
};


exports.handler = function (event, context, callback) {
    const alexa = Alexa.handler(event, context, callback);
    alexa.APP_ID = APP_ID;
    alexa.registerHandlers(handlers);
    alexa.execute();
};

function supportsDisplay (){
    var hasDisplay =
        this.event.context &&
        this.event.context.System &&
        this.event.context.System.device &&
        this.event.context.System.device.supportedInterfaces &&
        this.event.context.System.device.supportedInterfaces.Display
    return hasDisplay;
}
